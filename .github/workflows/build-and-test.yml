name: Build and Test

on:
  push:
    branches:
      - "*"

  pull_request:
    branches:
      - "*"

  schedule:
    - cron: "0 0 * * *"

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-13", "windows-latest"]
        python-version: ["3.8", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - uses: mamba-org/setup-micromamba@v1
        with:
          generate-run-shell: true
          micromamba-version: "1.5.8-0" # any version from https://github.com/mamba-org/micromamba-releases
          # environment-file: environment.yml
          environment-name: fedoo
          create-args: >-
            python=${{ matrix.python-version }}
            numpy
            scipy
            pypardiso
            pyvista
            set3mah::simcoon
            pytest
            pytest-xdist
          init-shell: powershell bash
          download-micromamba: true
          cache-environment: false
          post-cleanup: "all"

      # - name: Update environment Unix
      #   run: mamba env update -n fedoo -f environment.yml
      #   if: steps.cache.outputs.cache-hit != 'true' && runner.os != 'Windows'

      # - name: Update environment Windows
      #   run: conda install -y python>=3.8 numpy>=1.22.4 scipy pypardiso pyvista>=0.39 set3mah::simcoon pytest pytest-xdist
      #   if: steps.cache.outputs.cache-hit != 'true' && runner.os == 'Windows'

      # - name: Debug tests (without scikit-umfpack)
      #   if: runner.os != 'Windows'
      #   run: conda install -y
      #   shell: micromamba-shell {0}

      # - name: Debug tests (without scikit-umfpack)
      #   if: runner.os == 'Windows'
      #   run: conda install -y
      #   shell: pwsh

      - name: Install
        if: runner.os != 'Windows'
        shell: micromamba-shell {0}
        run: pip install .

      - name: Test
        if: runner.os != 'Windows'
        shell: micromamba-shell {0}
        run: pytest tests -n auto

      - name: Install
        if: runner.os == 'Windows'
        shell: pwsh
        run: pip install .

      - name: Test
        if: runner.os == 'Windows'
        shell: pwsh
        run: pytest tests -n auto
